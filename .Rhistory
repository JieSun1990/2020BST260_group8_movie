shiny::runApp()
runApp()
# Tab2 data
load("dat/Module2_network.RData")
runApp()
runApp()
runApp()
runApp()
# Mod 2 data
load("dat/Module2_network.RData")
mvn2id
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
315*800/516
315*800/560
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# load the calculated network
load(file = "dat/raw/Net_movie.RData")
# load the calculated network
load(file = "dat/Net_movie.RData")
dir(".")
dir("dat")
# load the calculated network
load(file = "dat/Net_movie.RData")
# load the calculated network
load(file = "dat/Net_movie.RData")
dir("dat")
# load the calculated network
load(file = "./dat/Net_movie.RData")
# load the calculated network
load("./dat/Net_movie.RData")
###
require(tidyverse)
require(igraph)
require(visNetwork)
# load data
load(file = "dat/raw/Net_movie.RData")
# load data
load(file = "dat/Net_movie.RData")
require(tidyverse)
require(visNetwork)
# load the calculated network
load(file = "dat/Net_movie.RData")
require(tidyverse)
require(visNetwork)
# load the calculated network
load(file = "../dat/Net_movie.RData")
ndls0 <- left_join(ndls, df2, by = c("id" = "imdb_ID"))%>%
select(-starts_with("genre_"), -ends_with("male"), -ends_with("female"))%>%
mutate(
director = lapply(director, function(x) paste0(x, collapse = ", ") ) %>% unlist,
writer = lapply(writer, function(x) paste0(x, collapse = ", ") )%>% unlist,
cast = lapply(cast, function(x) paste0(x[1:5], collapse = ", ") )%>% unlist,
genres = lapply(genres, function(x) paste0(x[1:3], collapse = ", ") )%>% unlist,
award_win = ifelse(is.na(award_win), 0, award_win),
title = str_remove(title, "\\(.+\\)"),
)%>%
filter(title != "")%>%
arrange(title)
# helpers
mvn2id <- setNames(ndls0$id, nm = ndls0$title)
id2mvn <- setNames(ndls0$title, nm = ndls0$id)
id2rating <- setNames(ndls0$rating_all, nm = ndls0$id)
# define tooltip info
ndls <- ndls0 %>%
mutate(
tooltip = paste0("<div style='font-size:70%'>",
"<b style='font-size:150%;color:#396a93;'>", title,"</b> <b>(", year, ")</b><br>",
"<b>Director:</b> ", director, "<br>",
"<b>Writer:</b> ", writer, "<br>",
"<b>Cast:</b> ", cast, ", ...<br>",
"<b>Genre:</b> ", genres, "<br>",
"<b>Rating:</b> ", rating_all, "/10 by ", vote_all, " voters <br>",
"<b>Box office:</b> ", gross_usa, " US dollars<br>",
"<b>Awards winned:</b> ", award_win, "<br>",
"<b>Eigen centrality:</b> ", round(eigen_cen_c, 3),"<br>",
"<b>More on <a href='https://www.imdb.com/title/", id ,"'>IMDb</a></b></div>"
)
) %>%
select(id, title, year,award_win, rating_all, vote_all, gross_usa, cumulative_worldwide_gross, budget, tooltip)%>%
mutate(
rating_all_vote = rating_all*vote_all,
rating_all_vote = ecdf(rating_all_vote)(rating_all_vote),
rating_all  = ecdf(rating_all)(rating_all),
gross_usa  = ecdf(gross_usa)(gross_usa),
cumulative_worldwide_gross  = ecdf(cumulative_worldwide_gross)(cumulative_worldwide_gross),
award_win = ecdf(award_win)(award_win)
)
edls <- edls %>%
mutate(title = paste0("<div style='font-size:70%'>",
"<b style='color:#396a93;'>", id2mvn[from], " <-> ",
id2mvn[to], "</b><br>",
"<b>No. of co-star:</b> ", c_c, "<br>",
"<b>No. of co-director:</b> ", c_d, "<br>",
"<b>No. of co-writer:</b> ", c_w, "</div>" ))
# Main function to plot the ego network of a movie
plot_mv_ego <- function(mvn, evar = "c_d",
max.n = 100, nodeLS = ndls,  edgeLS = edls,
m2i = mvn2id, i2r = id2rating, yvar = "rating_all"){
x <- m2i[[mvn]]
ed_x <- edgeLS %>%
filter(from == x | to == x)%>%
filter(!!sym(evar) > 0)%>%
mutate(color = "#a6a6a6")
x.nei <- unique(c(ed_x$from, ed_x$to))%>% .[.!=x]
wcut <- ifelse(evar == "c_c", 3, 1)
ed_x <- bind_rows(
ed_x,
edgeLS %>% filter(!!sym(evar) > wcut)%>%
filter(from %in% x.nei & to %in% x.nei)%>%
mutate(color = "#cccccc")
)
if(length(x.nei) > max.n){ # show at most max.n nodes
x.nei <- i2r[x.nei] %>% sort(decreasing = T) %>%
names() %>% .[1:max.n]
}
nd_x <- nodeLS %>%
filter(id %in% c(x, x.nei))%>%
mutate(color = ifelse(id == x, "#DC143C", "#7eaacd"),
label = "", value = !!sym(yvar), title = tooltip)
out <- visNetwork(nd_x, ed_x, background ="#fff9f3")%>%
visEdges(
# color = list(hover="#eb2d53",
#            highlight="#eb2d53", inherit=F),
scaling = list(min=.5, max=25))%>%
visNodes(borderWidth=0.3,
scaling = list(min=5, max=25))%>%
visOptions(
highlightNearest =list(enabled=T,
algorithm="hierarchical", degree=1))%>%
visInteraction(navigationButtons = F, hover = T,
hideEdgesOnDrag=T, selectConnectedEdges=T)%>%
visPhysics(enabled = T,
barnesHut = list(
centralGravity = 0.3,
springConstant = 0.04,
damping = 1
))
return(out)
}
plot_mv_ego(mvn = "Monsters University", evar = "c_c", max.n = 50, yvar = "gross_usa")
